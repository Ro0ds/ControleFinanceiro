using System;
using System.Data;
using System.IO;
using System.Windows.Forms;
using FirebirdSql.Data.FirebirdClient;
using System.Text;
using System.Collections.Generic;

namespace FinControle.DB {
    class DBClassePrincipal {
        ConectaBanco conectaBanco = new ConectaBanco();
        public DBClassePrincipal(){}

        private bool ExistePasta() {
            if (Directory.Exists(conectaBanco.CaminhoBanco)) {
                return true;
            }
            return false;
        }

        private bool ExisteBanco() {
            if (File.Exists(conectaBanco.CaminhoBancoCompleto)) {
                return true;
            }
            return false;
        }

        public List<string> TabelasIniciais() {
            StringBuilder Usuarios = new StringBuilder();
            StringBuilder Capital = new StringBuilder();
            StringBuilder CapitalFK1 = new StringBuilder();
            StringBuilder Entradas = new StringBuilder();
            StringBuilder EntradasFK1 = new StringBuilder();
            StringBuilder EntradasFK2 = new StringBuilder();
            List<string> CriarTabelas = new List<string>();

            /*************************************************************************************/
            Usuarios.Append("CREATE TABLE Usuarios(");
            Usuarios.Append("id_usuario int generated by default as identity,");
            Usuarios.Append("nome varchar(30) not null,");
            Usuarios.Append("idade int not null,");
            Usuarios.Append("senha varchar(30) not null,");
            Usuarios.Append("dica_senha varchar(30),");
            Usuarios.Append("CONSTRAINT PK_Usuarios primary key (id_usuario));\n");

            Capital.Append("CREATE TABLE Capital(");
            Capital.Append("id_usuario int,");
            Capital.Append("salario_bruto decimal(18, 4) not null,");
            Capital.Append("salario_liquido DECIMAL(18, 4),");
            Capital.Append("descontos DECIMAL(18, 4),");
            Capital.Append("CONSTRAINT PK_Capital primary key (salario_liquido));\n");

            Entradas.Append("CREATE TABLE Entradas(");
            Entradas.Append("id_usuario int,");
            Entradas.Append("salario_liquido DECIMAL(18, 4),");
            Entradas.Append("mes_ano date not null,");
            Entradas.Append("extras varchar(50),");
            Entradas.Append("valor_extras DECIMAL(18, 4));\n");

            /*************************************************************************************/
            CapitalFK1.Append("ALTER TABLE Capital ADD CONSTRAINT FK_Capital_Usuario foreign key " +
                "(id_usuario) references Usuarios (id_usuario) ON UPDATE CASCADE ON DELETE CASCADE;\n");

            EntradasFK1.Append("ALTER TABLE Entradas ADD CONSTRAINT FK_Entradas_Usuarios foreign key " +
                "(id_usuario) references Usuarios (id_usuario) ON UPDATE CASCADE ON DELETE CASCADE;\n");

            EntradasFK2.Append("ALTER TABLE Entradas ADD CONSTRAINT FK_Entradas_Capital foreign key " +
                "(salario_liquido) references Capital (salario_liquido) ON UPDATE CASCADE ON DELETE CASCADE;\n");
            /*************************************************************************************/

            CriarTabelas.Add($"{Usuarios}");
            CriarTabelas.Add($"{Capital}");
            CriarTabelas.Add($"{Entradas}");
            CriarTabelas.Add($"{CapitalFK1}");
            CriarTabelas.Add($"{EntradasFK1}");
            CriarTabelas.Add($"{EntradasFK2}");

            return CriarTabelas;
        }

        public void VerificaBanco() {
            if (!ExistePasta()) {
                MessageBox.Show("Pasta não existe, criando...", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                try {
                    Directory.CreateDirectory(conectaBanco.CaminhoBanco);
                }
                catch (Exception a) {
                    MessageBox.Show($"Erro: {a.Message}", "Erro", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                }
            }

            if (!ExisteBanco()) {
                MessageBox.Show("Banco não encontrado, criando banco novo...", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                FbConnectionStringBuilder builder = new FbConnectionStringBuilder();

                try {
                    builder.ClientLibrary = conectaBanco.ClientLibrary;
                    builder.Database = conectaBanco.CaminhoBancoCompleto;
                    builder.UserID = conectaBanco.UsuarioBanco;
                    builder.Password = conectaBanco.SenhaBanco;
                    builder.Dialect = 3;
                    builder.ServerType = FbServerType.Embedded;

                    FbConnection.CreateDatabase(builder.ConnectionString);

                    try {
                        foreach (var comando in TabelasIniciais()) {
                            conectaBanco.QuerySQL = new FbCommand(comando, new FbConnection(builder.ConnectionString));
                            conectaBanco.QuerySQL.CommandType = CommandType.Text;
                            conectaBanco.QuerySQL.Connection.Open();
                            conectaBanco.QuerySQL.ExecuteNonQuery();
                            conectaBanco.QuerySQL.Connection.Close();
                        }
                    }
                    catch (Exception a) {
                        MessageBox.Show(a.Message, "Erro", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                        return;
                    }
                }
                catch (Exception a) {
                    MessageBox.Show(a.Message, "Erro", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                    return;
                }

                MessageBox.Show($"Banco criado com sucesso!\nData e Horário de criação: " +
                    $"{File.GetCreationTime(conectaBanco.CaminhoBancoCompleto)}", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}